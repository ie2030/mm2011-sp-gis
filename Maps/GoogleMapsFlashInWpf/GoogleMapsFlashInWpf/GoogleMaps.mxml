<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute">

<maps:Map xmlns:maps="com.google.maps.*"
    id="map"
    mapevent_mapready="onMapReady(event)"
    width="100%"
    height="100%"
    sensor="false"
    key="ABQIAAAA6Je9wEhpps-6h4SLEzfx0hQcnJAsAPU0edVn7hFTQC8ea3A_VBRkCS6mZzjo_25VBG1y_bIKsYiRMg" />

<mx:Script>
<![CDATA[
    import com.google.maps.services.ClientGeocoderOptions;
    import com.google.maps.overlays.Marker;
    import com.google.maps.overlays.Polyline;
    import com.google.maps.overlays.PolylineOptions;
    import com.google.maps.overlays.MarkerOptions;
    import com.google.maps.controls.MapTypeControl;
    import com.google.maps.controls.PositionControl;
    import com.google.maps.controls.ZoomControl;
    import com.google.maps.InfoWindowOptions;
    import com.google.maps.MapMouseEvent;
    import com.google.maps.services.ClientGeocoder;
    import com.google.maps.services.GeocodingEvent;
    import com.google.maps.LatLng;
    import com.google.maps.Map;
    import com.google.maps.MapEvent;
    import com.google.maps.MapType;
    import com.google.maps.styles.StrokeStyle;
    import com.google.maps.styles.FillStyle;
    import mx.controls.Alert;

    private var path : Polyline;    
    private var startMarker : Marker;
    private var finishMarker : Marker;
    private var marker : Number; // start, finish = 0, 1		

    private function setStart(lat : Number, lng : Number) : void{
        var newLatLng : LatLng = new LatLng(lat, lng);
        if (startMarker) map.removeOverlay(startMarker);
        startMarker = new Marker(newLatLng,
               new MarkerOptions({
                strokeStyle: new StrokeStyle({color: 0x000000}),
                fillStyle: new FillStyle({color: 0x0000ff, alpha: 0.8}),
                radius: 12,
                hasShadow: true
            }));
		map.addOverlay(startMarker);
        map.setCenter(newLatLng, 14, MapType.NORMAL_MAP_TYPE);
    }
    
    private function setFinish(lat : Number, lng : Number) : void{
        var newLatLng : LatLng = new LatLng(lat, lng);
        if (finishMarker) map.removeOverlay(finishMarker);
        finishMarker = new Marker(newLatLng,
               new MarkerOptions({
                strokeStyle: new StrokeStyle({color: 0x000000}),
                fillStyle: new FillStyle({color: 0xff0000, alpha: 0.8}),
                radius: 12,
                hasShadow: true
            }));
		map.addOverlay(finishMarker);
        map.setCenter(newLatLng, 14, MapType.NORMAL_MAP_TYPE);
    }

    private function onMapReady(event:Event):void {
        var centerLL : LatLng = new LatLng(59.939039, 30.315758);
        map.setCenter(centerLL, 14, MapType.NORMAL_MAP_TYPE);

        map.addControl(new ZoomControl());
        map.addControl(new PositionControl());
        map.addControl(new MapTypeControl());

        map.addEventListener(MapMouseEvent.CLICK, onMapClick);
	
	    marker = 0;
	    ExternalInterface.addCallback("Drawline", drawPolyline);
        ExternalInterface.addCallback("Clear", clear);
	    ExternalInterface.addCallback("SelectMarker", selectMarker);
        ExternalInterface.addCallback("SetStart", setStart);
        ExternalInterface.addCallback("SetFinish", setFinish);
    }

    private function empty():void {}

    private function onMapClick(event:MapMouseEvent):void {
        if (path) map.removeOverlay(path);
        path = null;
	var latlng : LatLng = event.latLng;
	if (marker == 0){
 	    if (!startMarker) {
                startMarker = new Marker(latlng,
                  new MarkerOptions({
                    strokeStyle: new StrokeStyle({color: 0x000000}),
                    fillStyle: new FillStyle({color: 0x0000ff, alpha: 0.8}),
                    radius: 12,
                    hasShadow: true
                }));
		map.addOverlay(startMarker);
	    }
            else
                startMarker.setLatLng(latlng);
            ExternalInterface.call("setStPosition", latlng.lat(), latlng.lng());
        } else {
 	    if (!finishMarker) { 
                finishMarker = new Marker(latlng,
                  new MarkerOptions({
                    strokeStyle: new StrokeStyle({color: 0x000000}),
                    fillStyle: new FillStyle({color: 0xff0000, alpha: 0.8}),
                    radius: 12,
                    hasShadow: true
                }));
                map.addOverlay(finishMarker);
            }
            else
                finishMarker.setLatLng(latlng);
            ExternalInterface.call("setFnPosition", latlng.lat(), latlng.lng());
        };
    }

    private function drawPolyline(points:Array):void {
        if (points.length < 2) return;
        if (path) map.removeOverlay(path);
        var latlng : Array = new Array();
        for (var i = 0; i < points.length; i+=1) {
            latlng.push(new LatLng(points[i][0], points[i][1]));
        }
        path = new Polyline(latlng,
              new PolylineOptions({
              strokeStyle: new StrokeStyle({
              color: 0x000000,
              thickness: 4,
              alpha: 0.7})
          }));
        map.addOverlay(path);
    }

    private function clear(): void {
        if (path) map.removeOverlay(path);
        path = null;
        if (finishMarker) map.removeOverlay(finishMarker);
        finishMarker = null;
        if (startMarker) map.removeOverlay(startMarker);
        startMarker = null;
    }
    
   private function selectMarker(num : Number){
       marker = num;
   }
]]>
</mx:Script>
</mx:Application>
